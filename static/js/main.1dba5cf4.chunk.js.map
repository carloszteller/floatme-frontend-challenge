{"version":3,"sources":["components/Search.js","components/Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Search","change","term","FormControl","className","fullWidth","Input","id","placeholder","value","onChange","style","padding","endAdornment","InputAdornment","position","inputProps","Pokemon","pokemon","search","favorites","setFavorite","useState","selectedPokemon","setSelectefPokemon","setIsModalOpen","closeModal","Grid","container","spacing","filter","p","name","toLowerCase","includes","map","item","key","xs","sm","md","Card","onClick","pId","CardContent","src","sprites","front_default","alt","justify","types","t","slot","Typography","align","type","Dialog","open","onClose","DialogTitle","DialogActions","IconButton","aria-label","Favorite","FavoriteBorder","Close","DialogContent","DialogContentText","flavor_text_entries","language","version","flavor_text","stats","s","width","base_stat","stat","App","setPokemon","searchTerm","setSearchTerm","setFavorites","isLoading","setIsLoading","useEffect","species","axios","get","then","res","all","data","results","url","i","Object","assign","console","log","Backdrop","process","Container","component","variant","e","target","favoritePokemon","splice","indexOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1dba5cf4.chunk.js","sourcesContent":["import React from 'react';\nimport { FormControl, Input, InputAdornment } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\n\nexport default function Search({change, term}) {\n    return (\n        <FormControl className=\"search my-2em\" fullWidth={true}>\n             <Input\n                id=\"search-pokemon\"\n                placeholder=\"Search Pokemon\"\n                value={term}\n                onChange={change}\n                style={{ padding: \".5em 1em\" }}\n                endAdornment={ <InputAdornment position=\"end\"><SearchIcon /></InputAdornment> }\n                inputProps={{ 'aria-label': 'search pokemon' }}   \n            />\n        </FormControl>\n    );\n}","import React, { useState } from 'react';\nimport { Grid, Card, CardContent, Typography, Dialog, DialogActions, DialogTitle, DialogContent, DialogContentText, IconButton, Slide  } from '@material-ui/core';\nimport { Close, Favorite, FavoriteBorder } from '@material-ui/icons';\n\nexport default function Pokemon({pokemon, search, favorites, setFavorite}) {\n    const [selectedPokemon, setSelectefPokemon] = useState();\n    const [isModalOpen, setIsModalOpen] = useState(false);\n\n    const openModal = pId => {\n        setIsModalOpen(true);\n        setSelectefPokemon(pId);\n    }\n\n    const closeModal = () => {\n        setIsModalOpen(false);\n        setSelectefPokemon(null);\n    }\n\n    return (\n        <Grid container spacing={3}>\n            {pokemon && pokemon.filter(p => p.name.toLowerCase().includes(search.toLowerCase())).map(p => (\n                <Grid item key={p.id} xs={12} sm={6} md={3}>\n                    <Card onClick={() => openModal(p.id)}>\n                        <CardContent className=\"pokemon-card\">\n                            <img src={p.sprites.front_default} alt={p.name} />\n                            <p>{`No. ${p.id}`}</p>\n                            <p className=\"capitalize\">{p.name}</p>\n                            <Grid container justify=\"center\" spacing={2}>\n                                {p.types && p.types.map(t => (\n                                    <Grid item xs={4} md={6} key={t.slot}>\n                                        <Typography align=\"center\" className={`type ${t.type.name}`}>{t.type.name}</Typography>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                        </CardContent>\n                    </Card>\n\n                    <Dialog\n                        open={selectedPokemon === p.id}\n                        onClose={closeModal}\n                    >\n                        <DialogTitle className=\"capitalize\">\n                            {p.name}\n                            <DialogActions className=\"modal-buttons\">\n                                <IconButton aria-label={`favorite-${p.name}`} onClick={() => setFavorite(p.name)}>\n                                    {favorites.includes(p.name) ? (\n                                        <Favorite />\n                                    ) : (\n                                        <FavoriteBorder />\n                                    )}\n                                </IconButton>\n                                <IconButton aria-label=\"close-modal\" onClick={closeModal}>\n                                    <Close />\n                                </IconButton>\n                            </DialogActions>\n                        </DialogTitle>\n                        <DialogContent>\n                            <DialogContentText>\n                                <img src={p.sprites.front_default} alt={p.name} />\n                                <p>{`No. ${p.id}`}</p>\n                                {p.flavor_text_entries && p.flavor_text_entries.map(t => {\n                                    if(t.language.name === 'en' && t.version.name === 'red') {\n                                        return (<p>{t.flavor_text}</p>);\n                                    }\n                                })}\n                                {p.stats && p.stats.map(s => (\n                                    <p key={p.id} className={`type ${p.types[0].type.name}`} style={{ width: `calc(${s.base_stat}/200 * 100%)` }}>{`${s.stat.name}: ${s.base_stat}`}</p>\n                                ))}\n                            </DialogContentText>\n                        </DialogContent>\n                    </Dialog>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}","import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport { Container, Typography, Backdrop } from '@material-ui/core';\nimport Search from './components/Search';\nimport Pokemon from './components/Pokemon';\n\nimport './App.css';\n\nexport default function App() {\n  const [pokemon, setPokemon] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [favorites, setFavorites] = useState([]);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const onSearchChange = e => {\n    setSearchTerm(e.target.value);\n  }\n\n  const onSetFavorite = favoritePokemon => {\n    if(favorites.includes(favoritePokemon)) {\n      favorites.splice(favorites.indexOf(favoritePokemon), 1);\n      setFavorites([...favorites]);\n    } else {\n      setFavorites(favorites => [...favorites, favoritePokemon]);\n    }\n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    let species = [];\n    let stats = [];\n\n    axios.get('https://pokeapi.co/api/v2/pokemon?limit=151')\n      .then(res => {\n        return axios.all(res.data.results.map(p => axios.get(p.url)));\n      })\n      .then(res => {\n        stats = res.map(p => p.data);\n      \n        return axios.all(res.map(s => axios.get(s.data.species.url)));\n      }).then(res => {\n        species = res.map(p => p.data);\n\n        setPokemon(stats.map((p, i) => Object.assign({}, p, species[i])));\n        setIsLoading(false);\n      });\n  }, []);\n\n  console.log(pokemon);\n\n  if(isLoading) {\n    return (\n      <Backdrop open={true}>\n        <img src={process.env.PUBLIC_URL + '/img/pokeball.gif'} alt=\"Pokeball loader\" />\n      </Backdrop>\n    );\n  }\n\n  return (\n    <Container>\n      <Typography component=\"h1\" variant=\"h3\" className=\"header\">Kanto Pokédex</Typography>\n      <Search change={onSearchChange} term={searchTerm} />\n      <Pokemon pokemon={pokemon} search={searchTerm} favorites={favorites} setFavorite={onSetFavorite} />\n    </Container>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}